using DataGenerator.Core;
using DataGenerator.Extensions;

namespace DataGenerator.Generators
{
  /// <summary>
  /// Represents a generator of strings of different values including null and empty.
  /// </summary>
  public sealed class UsernameGenerator : IValueGenerator
  {
    private const int DefaultUsernameLength = 4;

    /// <summary>
    /// Initializes this instance with a default length.
    /// </summary>
    public UsernameGenerator() : this(DefaultUsernameLength) { }

    /// <summary>
    /// Initializes this instance with a username length.
    /// </summary>
    public UsernameGenerator(int length)
    {
      Guard.ArgumentBigger(0, length, nameof(length));

      UsernameLength = length;
    }

    /// <summary>
    /// Returns a random username.
    /// </summary>
    public object New()
    {
      return StringExtensions.GenerateRandom(UsernameLength).ToUpper();
    }

    /// <summary>
    /// Returns a random username of the given length.
    /// </summary>
    public string NewUsername(int length)
    {
      Guard.ArgumentBigger(0, length, nameof(length));

      return StringExtensions.GenerateRandom(length).ToUpper();
    }

    /// <summary>
    /// Gets the length of user names generated by <see cref="New"/>.
    /// </summary>
    public int UsernameLength { get; }
  }
}
